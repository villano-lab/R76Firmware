#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_a_V_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_a_V_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_a_V_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_a_V_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_a_V_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_a_V_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_a_V_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_a_V_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_a_V_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_a_V_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_a_V_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_a_V_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_a_V_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_a_V_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_a_V_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_a_V_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_a_V_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_a_V_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_a_V_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_a_V_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_a_V_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_a_V_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_a_V_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_a_V_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_a_V_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_a_V_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_a_V_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_a_V_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_a_V_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_a_V_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_a_V_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_a_V_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_a_V_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_a_V_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_a_V_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_a_V_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_a_V_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_a_V_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_a_V_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_a_V_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_a_V_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_a_V_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_a_V_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_a_V_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_a_V_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("stream0_V_V_TDATA", 64, hls_in, 1, "axis", "in_data", 1),
	Port_Property("stream0_V_V_TVALID", 1, hls_in, 1, "axis", "in_vld", 1),
	Port_Property("stream0_V_V_TREADY", 1, hls_out, 1, "axis", "in_acc", 1),
	Port_Property("debug_buffer_status", 32, hls_out, 6, "ap_ovld", "out_data", 1),
	Port_Property("debug_buffer_status_ap_vld", 1, hls_out, 6, "ap_ovld", "out_vld", 1),
	Port_Property("debug_bufsel_0", 32, hls_out, 7, "ap_ovld", "out_data", 1),
	Port_Property("debug_bufsel_0_ap_vld", 1, hls_out, 7, "ap_ovld", "out_vld", 1),
	Port_Property("debug_buf0_p", 32, hls_out, 8, "ap_ovld", "out_data", 1),
	Port_Property("debug_buf0_p_ap_vld", 1, hls_out, 8, "ap_ovld", "out_vld", 1),
	Port_Property("debug_inbuffer_pointer", 32, hls_out, 9, "ap_ovld", "out_data", 1),
	Port_Property("debug_inbuffer_pointer_ap_vld", 1, hls_out, 9, "ap_ovld", "out_vld", 1),
	Port_Property("debug_dst_var_V", 64, hls_out, 10, "ap_ovld", "out_data", 1),
	Port_Property("debug_dst_var_V_ap_vld", 1, hls_out, 10, "ap_ovld", "out_vld", 1),
	Port_Property("interrupt_r", 1, hls_out, 14, "ap_ovld", "out_data", 1),
	Port_Property("interrupt_r_ap_vld", 1, hls_out, 14, "ap_ovld", "out_vld", 1),
	Port_Property("s_axi_axil_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_axil_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_axil_AWADDR", 7, hls_in, -1, "", "", 1),
	Port_Property("s_axi_axil_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_axil_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_axil_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_axil_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_axil_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_axil_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_axil_ARADDR", 7, hls_in, -1, "", "", 1),
	Port_Property("s_axi_axil_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_axil_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_axil_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_axil_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_axil_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_axil_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_axil_BRESP", 2, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "data_mover";
