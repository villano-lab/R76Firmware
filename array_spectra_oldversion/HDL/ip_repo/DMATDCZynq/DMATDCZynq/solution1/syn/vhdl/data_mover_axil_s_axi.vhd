-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity data_mover_axil_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 7;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    -- user signals
    buffer_status         :in   STD_LOGIC_VECTOR(31 downto 0);
    buffer_status_ap_vld  :in   STD_LOGIC;
    buffer_ack            :out  STD_LOGIC_VECTOR(31 downto 0);
    buffer_seq_address0   :in   STD_LOGIC_VECTOR(0 downto 0);
    buffer_seq_ce0        :in   STD_LOGIC;
    buffer_seq_we0        :in   STD_LOGIC;
    buffer_seq_d0         :in   STD_LOGIC_VECTOR(63 downto 0);
    bufsize_address0      :in   STD_LOGIC_VECTOR(0 downto 0);
    bufsize_ce0           :in   STD_LOGIC;
    bufsize_we0           :in   STD_LOGIC;
    bufsize_d0            :in   STD_LOGIC_VECTOR(31 downto 0);
    run                   :out  STD_LOGIC_VECTOR(0 downto 0);
    DDROFFSET_V           :out  STD_LOGIC_VECTOR(31 downto 0);
    stat_counter_address0 :in   STD_LOGIC_VECTOR(1 downto 0);
    stat_counter_ce0      :in   STD_LOGIC;
    stat_counter_we0      :in   STD_LOGIC;
    stat_counter_d0       :in   STD_LOGIC_VECTOR(63 downto 0)
);
end entity data_mover_axil_s_axi;

-- ------------------------Address Info-------------------
-- 0x00 : reserved
-- 0x04 : reserved
-- 0x08 : reserved
-- 0x0c : reserved
-- 0x10 : Data signal of buffer_status
--        bit 31~0 - buffer_status[31:0] (Read)
-- 0x14 : Control signal of buffer_status
--        bit 0  - buffer_status_ap_vld (Read/COR)
--        others - reserved
-- 0x18 : Data signal of buffer_ack
--        bit 31~0 - buffer_ack[31:0] (Read/Write)
-- 0x1c : reserved
-- 0x38 : Data signal of run
--        bit 0  - run[0] (Read/Write)
--        others - reserved
-- 0x3c : reserved
-- 0x40 : Data signal of DDROFFSET_V
--        bit 31~0 - DDROFFSET_V[31:0] (Read/Write)
-- 0x44 : reserved
-- 0x20 ~
-- 0x2f : Memory 'buffer_seq' (2 * 64b)
--        Word 2n   : bit [31:0] - buffer_seq[n][31: 0]
--        Word 2n+1 : bit [31:0] - buffer_seq[n][63:32]
-- 0x30 ~
-- 0x37 : Memory 'bufsize' (2 * 32b)
--        Word n : bit [31:0] - bufsize[n]
-- 0x60 ~
-- 0x7f : Memory 'stat_counter' (4 * 64b)
--        Word 2n   : bit [31:0] - stat_counter[n][31: 0]
--        Word 2n+1 : bit [31:0] - stat_counter[n][63:32]
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of data_mover_axil_s_axi is
    type states is (wridle, wrdata, wrresp, wrreset, rdidle, rddata, rdreset);  -- read and write fsm states
    signal wstate  : states := wrreset;
    signal rstate  : states := rdreset;
    signal wnext, rnext: states;
    constant ADDR_BUFFER_STATUS_DATA_0 : INTEGER := 16#10#;
    constant ADDR_BUFFER_STATUS_CTRL   : INTEGER := 16#14#;
    constant ADDR_BUFFER_ACK_DATA_0    : INTEGER := 16#18#;
    constant ADDR_BUFFER_ACK_CTRL      : INTEGER := 16#1c#;
    constant ADDR_RUN_DATA_0           : INTEGER := 16#38#;
    constant ADDR_RUN_CTRL             : INTEGER := 16#3c#;
    constant ADDR_DDROFFSET_V_DATA_0   : INTEGER := 16#40#;
    constant ADDR_DDROFFSET_V_CTRL     : INTEGER := 16#44#;
    constant ADDR_BUFFER_SEQ_BASE      : INTEGER := 16#20#;
    constant ADDR_BUFFER_SEQ_HIGH      : INTEGER := 16#2f#;
    constant ADDR_BUFSIZE_BASE         : INTEGER := 16#30#;
    constant ADDR_BUFSIZE_HIGH         : INTEGER := 16#37#;
    constant ADDR_STAT_COUNTER_BASE    : INTEGER := 16#60#;
    constant ADDR_STAT_COUNTER_HIGH    : INTEGER := 16#7f#;
    constant ADDR_BITS         : INTEGER := 7;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_buffer_status   : UNSIGNED(31 downto 0) := (others => '0');
    signal int_buffer_status_ap_vld : STD_LOGIC;
    signal int_buffer_ack      : UNSIGNED(31 downto 0) := (others => '0');
    signal int_run             : UNSIGNED(0 downto 0) := (others => '0');
    signal int_DDROFFSET_V     : UNSIGNED(31 downto 0) := (others => '0');
    -- memory signals
    signal int_buffer_seq_address0 : UNSIGNED(0 downto 0);
    signal int_buffer_seq_ce0  : STD_LOGIC;
    signal int_buffer_seq_we0  : STD_LOGIC;
    signal int_buffer_seq_be0  : UNSIGNED(7 downto 0);
    signal int_buffer_seq_d0   : UNSIGNED(63 downto 0);
    signal int_buffer_seq_q0   : UNSIGNED(63 downto 0);
    signal int_buffer_seq_address1 : UNSIGNED(0 downto 0);
    signal int_buffer_seq_ce1  : STD_LOGIC;
    signal int_buffer_seq_we1  : STD_LOGIC;
    signal int_buffer_seq_be1  : UNSIGNED(7 downto 0);
    signal int_buffer_seq_d1   : UNSIGNED(63 downto 0);
    signal int_buffer_seq_q1   : UNSIGNED(63 downto 0);
    signal int_buffer_seq_read : STD_LOGIC;
    signal int_buffer_seq_write : STD_LOGIC;
    signal int_buffer_seq_shift : UNSIGNED(0 downto 0);
    signal int_bufsize_address0 : UNSIGNED(0 downto 0);
    signal int_bufsize_ce0     : STD_LOGIC;
    signal int_bufsize_we0     : STD_LOGIC;
    signal int_bufsize_be0     : UNSIGNED(3 downto 0);
    signal int_bufsize_d0      : UNSIGNED(31 downto 0);
    signal int_bufsize_q0      : UNSIGNED(31 downto 0);
    signal int_bufsize_address1 : UNSIGNED(0 downto 0);
    signal int_bufsize_ce1     : STD_LOGIC;
    signal int_bufsize_we1     : STD_LOGIC;
    signal int_bufsize_be1     : UNSIGNED(3 downto 0);
    signal int_bufsize_d1      : UNSIGNED(31 downto 0);
    signal int_bufsize_q1      : UNSIGNED(31 downto 0);
    signal int_bufsize_read    : STD_LOGIC;
    signal int_bufsize_write   : STD_LOGIC;
    signal int_stat_counter_address0 : UNSIGNED(1 downto 0);
    signal int_stat_counter_ce0 : STD_LOGIC;
    signal int_stat_counter_we0 : STD_LOGIC;
    signal int_stat_counter_be0 : UNSIGNED(7 downto 0);
    signal int_stat_counter_d0 : UNSIGNED(63 downto 0);
    signal int_stat_counter_q0 : UNSIGNED(63 downto 0);
    signal int_stat_counter_address1 : UNSIGNED(1 downto 0);
    signal int_stat_counter_ce1 : STD_LOGIC;
    signal int_stat_counter_we1 : STD_LOGIC;
    signal int_stat_counter_be1 : UNSIGNED(7 downto 0);
    signal int_stat_counter_d1 : UNSIGNED(63 downto 0);
    signal int_stat_counter_q1 : UNSIGNED(63 downto 0);
    signal int_stat_counter_read : STD_LOGIC;
    signal int_stat_counter_write : STD_LOGIC;
    signal int_stat_counter_shift : UNSIGNED(0 downto 0);

    component data_mover_axil_s_axi_ram is
        generic (
            BYTES   : INTEGER :=4;
            DEPTH   : INTEGER :=256;
            AWIDTH  : INTEGER :=8);
        port (
            clk0    : in  STD_LOGIC;
            address0: in  UNSIGNED(AWIDTH-1 downto 0);
            ce0     : in  STD_LOGIC;
            we0     : in  STD_LOGIC;
            be0     : in  UNSIGNED(BYTES-1 downto 0);
            d0      : in  UNSIGNED(BYTES*8-1 downto 0);
            q0      : out UNSIGNED(BYTES*8-1 downto 0);
            clk1    : in  STD_LOGIC;
            address1: in  UNSIGNED(AWIDTH-1 downto 0);
            ce1     : in  STD_LOGIC;
            we1     : in  STD_LOGIC;
            be1     : in  UNSIGNED(BYTES-1 downto 0);
            d1      : in  UNSIGNED(BYTES*8-1 downto 0);
            q1      : out UNSIGNED(BYTES*8-1 downto 0));
    end component data_mover_axil_s_axi_ram;

    function log2 (x : INTEGER) return INTEGER is
        variable n, m : INTEGER;
    begin
        n := 1;
        m := 2;
        while m < x loop
            n := n + 1;
            m := m * 2;
        end loop;
        return n;
    end function log2;

begin
-- ----------------------- Instantiation------------------
-- int_buffer_seq
int_buffer_seq : data_mover_axil_s_axi_ram
generic map (
     BYTES    => 8,
     DEPTH    => 2,
     AWIDTH   => log2(2))
port map (
     clk0     => ACLK,
     address0 => int_buffer_seq_address0,
     ce0      => int_buffer_seq_ce0,
     we0      => int_buffer_seq_we0,
     be0      => int_buffer_seq_be0,
     d0       => int_buffer_seq_d0,
     q0       => int_buffer_seq_q0,
     clk1     => ACLK,
     address1 => int_buffer_seq_address1,
     ce1      => int_buffer_seq_ce1,
     we1      => int_buffer_seq_we1,
     be1      => int_buffer_seq_be1,
     d1       => int_buffer_seq_d1,
     q1       => int_buffer_seq_q1);
-- int_bufsize
int_bufsize : data_mover_axil_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 2,
     AWIDTH   => log2(2))
port map (
     clk0     => ACLK,
     address0 => int_bufsize_address0,
     ce0      => int_bufsize_ce0,
     we0      => int_bufsize_we0,
     be0      => int_bufsize_be0,
     d0       => int_bufsize_d0,
     q0       => int_bufsize_q0,
     clk1     => ACLK,
     address1 => int_bufsize_address1,
     ce1      => int_bufsize_ce1,
     we1      => int_bufsize_we1,
     be1      => int_bufsize_be1,
     d1       => int_bufsize_d1,
     q1       => int_bufsize_q1);
-- int_stat_counter
int_stat_counter : data_mover_axil_s_axi_ram
generic map (
     BYTES    => 8,
     DEPTH    => 4,
     AWIDTH   => log2(4))
port map (
     clk0     => ACLK,
     address0 => int_stat_counter_address0,
     ce0      => int_stat_counter_ce0,
     we0      => int_stat_counter_we0,
     be0      => int_stat_counter_be0,
     d0       => int_stat_counter_d0,
     q0       => int_stat_counter_q0,
     clk1     => ACLK,
     address1 => int_stat_counter_address1,
     ce1      => int_stat_counter_ce1,
     we1      => int_stat_counter_we1,
     be1      => int_stat_counter_be1,
     d1       => int_stat_counter_d1,
     q1       => int_stat_counter_q1);

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wrreset;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) and (int_buffer_seq_read = '0') and (int_bufsize_read = '0') and (int_stat_counter_read = '0') else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdreset;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_BUFFER_STATUS_DATA_0 =>
                        rdata_data <= RESIZE(int_buffer_status(31 downto 0), 32);
                    when ADDR_BUFFER_STATUS_CTRL =>
                        rdata_data <= (0 => int_buffer_status_ap_vld, others => '0');
                    when ADDR_BUFFER_ACK_DATA_0 =>
                        rdata_data <= RESIZE(int_buffer_ack(31 downto 0), 32);
                    when ADDR_RUN_DATA_0 =>
                        rdata_data <= RESIZE(int_run(0 downto 0), 32);
                    when ADDR_DDROFFSET_V_DATA_0 =>
                        rdata_data <= RESIZE(int_DDROFFSET_V(31 downto 0), 32);
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                elsif (int_buffer_seq_read = '1') then
                    rdata_data <= RESIZE(SHIFT_RIGHT(int_buffer_seq_q1, TO_INTEGER(int_buffer_seq_shift)*32), 32);
                elsif (int_bufsize_read = '1') then
                    rdata_data <= int_bufsize_q1;
                elsif (int_stat_counter_read = '1') then
                    rdata_data <= RESIZE(SHIFT_RIGHT(int_stat_counter_q1, TO_INTEGER(int_stat_counter_shift)*32), 32);
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    buffer_ack           <= STD_LOGIC_VECTOR(int_buffer_ack);
    run                  <= STD_LOGIC_VECTOR(int_run);
    DDROFFSET_V          <= STD_LOGIC_VECTOR(int_DDROFFSET_V);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_buffer_status <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (buffer_status_ap_vld = '1') then
                    int_buffer_status <= UNSIGNED(buffer_status); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_buffer_status_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (buffer_status_ap_vld = '1') then
                    int_buffer_status_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_BUFFER_STATUS_CTRL) then
                    int_buffer_status_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_BUFFER_ACK_DATA_0) then
                    int_buffer_ack(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_buffer_ack(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_RUN_DATA_0) then
                    int_run(0 downto 0) <= (UNSIGNED(WDATA(0 downto 0)) and wmask(0 downto 0)) or ((not wmask(0 downto 0)) and int_run(0 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_DDROFFSET_V_DATA_0) then
                    int_DDROFFSET_V(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_DDROFFSET_V(31 downto 0));
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------
    -- buffer_seq
    int_buffer_seq_address0 <= UNSIGNED(buffer_seq_address0);
    int_buffer_seq_ce0   <= buffer_seq_ce0;
    int_buffer_seq_we0   <= buffer_seq_we0;
    int_buffer_seq_be0   <= (others => buffer_seq_we0);
    int_buffer_seq_d0    <= RESIZE(UNSIGNED(buffer_seq_d0), 64);
    int_buffer_seq_address1 <= raddr(3 downto 3) when ar_hs = '1' else waddr(3 downto 3);
    int_buffer_seq_ce1   <= '1' when ar_hs = '1' or (int_buffer_seq_write = '1' and WVALID  = '1') else '0';
    int_buffer_seq_we1   <= '1' when int_buffer_seq_write = '1' and WVALID = '1' else '0';
    int_buffer_seq_be1   <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_buffer_seq_d1    <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- bufsize
    int_bufsize_address0 <= UNSIGNED(bufsize_address0);
    int_bufsize_ce0      <= bufsize_ce0;
    int_bufsize_we0      <= bufsize_we0;
    int_bufsize_be0      <= (others => bufsize_we0);
    int_bufsize_d0       <= RESIZE(UNSIGNED(bufsize_d0), 32);
    int_bufsize_address1 <= raddr(2 downto 2) when ar_hs = '1' else waddr(2 downto 2);
    int_bufsize_ce1      <= '1' when ar_hs = '1' or (int_bufsize_write = '1' and WVALID  = '1') else '0';
    int_bufsize_we1      <= '1' when int_bufsize_write = '1' and WVALID = '1' else '0';
    int_bufsize_be1      <= UNSIGNED(WSTRB);
    int_bufsize_d1       <= UNSIGNED(WDATA);
    -- stat_counter
    int_stat_counter_address0 <= UNSIGNED(stat_counter_address0);
    int_stat_counter_ce0 <= stat_counter_ce0;
    int_stat_counter_we0 <= stat_counter_we0;
    int_stat_counter_be0 <= (others => stat_counter_we0);
    int_stat_counter_d0  <= RESIZE(UNSIGNED(stat_counter_d0), 64);
    int_stat_counter_address1 <= raddr(4 downto 3) when ar_hs = '1' else waddr(4 downto 3);
    int_stat_counter_ce1 <= '1' when ar_hs = '1' or (int_stat_counter_write = '1' and WVALID  = '1') else '0';
    int_stat_counter_we1 <= '1' when int_stat_counter_write = '1' and WVALID = '1' else '0';
    int_stat_counter_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_stat_counter_d1  <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_buffer_seq_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BUFFER_SEQ_BASE and raddr <= ADDR_BUFFER_SEQ_HIGH) then
                    int_buffer_seq_read <= '1';
                else
                    int_buffer_seq_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_buffer_seq_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BUFFER_SEQ_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BUFFER_SEQ_HIGH) then
                    int_buffer_seq_write <= '1';
                elsif (WVALID = '1') then
                    int_buffer_seq_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_buffer_seq_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_bufsize_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BUFSIZE_BASE and raddr <= ADDR_BUFSIZE_HIGH) then
                    int_bufsize_read <= '1';
                else
                    int_bufsize_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_bufsize_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BUFSIZE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BUFSIZE_HIGH) then
                    int_bufsize_write <= '1';
                elsif (WVALID = '1') then
                    int_bufsize_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stat_counter_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_STAT_COUNTER_BASE and raddr <= ADDR_STAT_COUNTER_HIGH) then
                    int_stat_counter_read <= '1';
                else
                    int_stat_counter_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stat_counter_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_STAT_COUNTER_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_STAT_COUNTER_HIGH) then
                    int_stat_counter_write <= '1';
                elsif (WVALID = '1') then
                    int_stat_counter_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_stat_counter_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;


end architecture behave;

library IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.all;

entity data_mover_axil_s_axi_ram is
    generic (
        BYTES   : INTEGER :=4;
        DEPTH   : INTEGER :=256;
        AWIDTH  : INTEGER :=8);
    port (
        clk0    : in  STD_LOGIC;
        address0: in  UNSIGNED(AWIDTH-1 downto 0);
        ce0     : in  STD_LOGIC;
        we0     : in  STD_LOGIC;
        be0     : in  UNSIGNED(BYTES-1 downto 0);
        d0      : in  UNSIGNED(BYTES*8-1 downto 0);
        q0      : out UNSIGNED(BYTES*8-1 downto 0);
        clk1    : in  STD_LOGIC;
        address1: in  UNSIGNED(AWIDTH-1 downto 0);
        ce1     : in  STD_LOGIC;
        we1     : in  STD_LOGIC;
        be1     : in  UNSIGNED(BYTES-1 downto 0);
        d1      : in  UNSIGNED(BYTES*8-1 downto 0);
        q1      : out UNSIGNED(BYTES*8-1 downto 0));

end entity data_mover_axil_s_axi_ram;

architecture behave of data_mover_axil_s_axi_ram is
    signal address0_tmp : UNSIGNED(AWIDTH-1 downto 0);
    signal address1_tmp : UNSIGNED(AWIDTH-1 downto 0);
    type RAM_T is array (0 to DEPTH - 1) of UNSIGNED(BYTES*8 - 1 downto 0);
    shared variable mem : RAM_T := (others => (others => '0'));
begin

    process (address0)
    begin
    address0_tmp <= address0;
    --synthesis translate_off
          if (address0 > DEPTH-1) then
              address0_tmp <= (others => '0');
          else
              address0_tmp <= address0;
          end if;
    --synthesis translate_on
    end process;

    process (address1)
    begin
    address1_tmp <= address1;
    --synthesis translate_off
          if (address1 > DEPTH-1) then
              address1_tmp <= (others => '0');
          else
              address1_tmp <= address1;
          end if;
    --synthesis translate_on
    end process;

    --read port 0
    process (clk0) begin
        if (clk0'event and clk0 = '1') then
            if (ce0 = '1') then
                q0 <= mem(to_integer(address0_tmp));
            end if;
        end if;
    end process;

    --read port 1
    process (clk1) begin
        if (clk1'event and clk1 = '1') then
            if (ce1 = '1') then
                q1 <= mem(to_integer(address1_tmp));
            end if;
        end if;
    end process;

    gen_write : for i in 0 to BYTES - 1 generate
    begin
        --write port 0
        process (clk0)
        begin
            if (clk0'event and clk0 = '1') then
                if (ce0 = '1' and we0 = '1' and be0(i) = '1') then
                    mem(to_integer(address0_tmp))(8*i+7 downto 8*i) := d0(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

        --write port 1
        process (clk1)
        begin
            if (clk1'event and clk1 = '1') then
                if (ce1 = '1' and we1 = '1' and be1(i) = '1') then
                    mem(to_integer(address1_tmp))(8*i+7 downto 8*i) := d1(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

    end generate;

end architecture behave;


