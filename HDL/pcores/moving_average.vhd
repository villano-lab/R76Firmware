-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity moving_average is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    adc_data_V : IN STD_LOGIC_VECTOR (15 downto 0);
    adc_data_V_ap_vld : IN STD_LOGIC;
    hold : IN STD_LOGIC;
    length_V : IN STD_LOGIC_VECTOR (15 downto 0);
    dataout_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    dataout_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of moving_average is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "moving_average,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tffg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.696500,HLS_SYN_LAT=3,HLS_SYN_TPT=3,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=184,HLS_SYN_LUT=476}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_400 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

    signal adc_data_V_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal adc_data_V_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal adc_data_V_ap_vld_preg : STD_LOGIC := '0';
    signal adc_data_V_ap_vld_in_sig : STD_LOGIC;
    signal intialized_count_V : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    signal write_pointer3_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal delay3_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal delay3_V_ce0 : STD_LOGIC;
    signal delay3_V_we0 : STD_LOGIC;
    signal delay3_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay3_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal accumulator_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal last_value_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal old_length_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal adc_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal hold_read_read_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hold_read_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal adc_data_V_read_reg_393 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_1_reg_398 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_tmp_6_fu_242_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_tmp_6_reg_412 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal tmp_12_fu_310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal intialized_count_V_f_2_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal intialized_count_V_f_phi_fu_127_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_precharge_reg_pp0_iter0_intialized_count_V_n_reg_135 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_phi_fu_149_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal intialized_count_V_f_1_phi_fu_160_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_precharge_reg_pp0_iter0_intialized_count_V_n_1_reg_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal intialized_count_V_n_1_phi_fu_172_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal intialized_count_V_n_2_fu_371_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge_fu_262_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_assign_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal plength_V_fu_194_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_222_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_228_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_cast_fu_280_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_cast_fu_284_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal not_tmp_s_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_idle_pp0 : STD_LOGIC;

    component moving_average_debkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    delay3_V_U : component moving_average_debkb
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay3_V_address0,
        ce0 => delay3_V_ce0,
        we0 => delay3_V_we0,
        d0 => delay3_V_d0,
        q0 => delay3_V_q0);





    adc_data_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                adc_data_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
                    adc_data_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = adc_data_V_ap_vld)) then 
                    adc_data_V_ap_vld_preg <= adc_data_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    adc_data_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                adc_data_V_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = adc_data_V_ap_vld)) then 
                    adc_data_V_preg <= adc_data_V;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0))) and not(ap_const_boolean_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    accumulator_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hold_read_reg_389 = ap_const_lv1_0)) then
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and not((ap_const_lv1_0 = tmp_2_reg_408)))) then 
                    accumulator_V <= tmp_11_fu_332_p2;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = tmp_2_reg_408))) then 
                    accumulator_V <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0))))) then
                adc_data_V_read_reg_393 <= adc_data_V_in_sig;
                hold_read_reg_389 <= (0=>hold, others=>'-');
                t_V_1_reg_398 <= intialized_count_V;
                tmp_14_reg_417 <= tmp_14_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (hold_read_reg_389 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_2_reg_408))) then
                ap_phi_precharge_reg_pp0_iter0_intialized_count_V_n_reg_135 <= tmp_12_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and not((ap_const_lv1_0 = intialized_count_V_f_2_fu_365_p2)))) then
                intialized_count_V <= intialized_count_V_n_2_fu_371_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 and (hold_read_reg_389 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                last_value_V <= tmp_17_fu_350_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and ap_const_boolean_1 and not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0))))) then
                old_length_V <= length_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0))) and (hold_read_read_fu_84_p2 = ap_const_lv1_0))) then
                tmp_2_reg_408 <= tmp_2_fu_198_p2;
                tmp_8_tmp_6_reg_412 <= tmp_8_tmp_6_fu_242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and ap_const_boolean_1 and not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0))) and (hold_read_read_fu_84_p2 = ap_const_lv1_0))) then
                write_pointer3_V <= storemerge_fu_262_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (adc_data_V_ap_vld_in_sig, ap_CS_fsm, ap_pipeline_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0))) and not((ap_const_logic_1 = ap_pipeline_idle_pp0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_pipeline_idle_pp0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    adc_data_V_ap_vld_in_sig_assign_proc : process(adc_data_V_ap_vld, adc_data_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = adc_data_V_ap_vld)) then 
            adc_data_V_ap_vld_in_sig <= adc_data_V_ap_vld;
        else 
            adc_data_V_ap_vld_in_sig <= adc_data_V_ap_vld_preg;
        end if; 
    end process;


    adc_data_V_blk_n_assign_proc : process(adc_data_V_ap_vld, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and ap_const_boolean_1)) then 
            adc_data_V_blk_n <= adc_data_V_ap_vld;
        else 
            adc_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    adc_data_V_in_sig_assign_proc : process(adc_data_V, adc_data_V_preg, adc_data_V_ap_vld)
    begin
        if ((ap_const_logic_1 = adc_data_V_ap_vld)) then 
            adc_data_V_in_sig <= adc_data_V;
        else 
            adc_data_V_in_sig <= adc_data_V_preg;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2 downto 2);
    ap_phi_precharge_reg_pp0_iter0_intialized_count_V_n_1_reg_168 <= "XXXXXXXXXXXXXXXX";
    ap_pipeline_idle_pp0 <= ap_const_logic_0;
    dataout_V <= last_value_V;

    dataout_V_ap_vld_assign_proc : process(adc_data_V_ap_vld_in_sig, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            dataout_V_ap_vld <= ap_const_logic_1;
        else 
            dataout_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    delay3_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, tmp_3_fu_208_p1, tmp_s_fu_300_p1)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
            delay3_V_address0 <= tmp_s_fu_300_p1(10 - 1 downto 0);
        elsif ((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1)) then 
            delay3_V_address0 <= tmp_3_fu_208_p1(10 - 1 downto 0);
        else 
            delay3_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    delay3_V_ce0_assign_proc : process(adc_data_V_ap_vld_in_sig, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0)))))) then 
            delay3_V_ce0 <= ap_const_logic_1;
        else 
            delay3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay3_V_d0 <= 
        adc_data_V_in_sig when (tmp_2_fu_198_p2(0) = '1') else 
        ap_const_lv16_0;

    delay3_V_we0_assign_proc : process(adc_data_V_ap_vld_in_sig, ap_CS_fsm_pp0_stage0, hold_read_read_fu_84_p2)
    begin
        if ((((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((adc_data_V_ap_vld_in_sig = ap_const_logic_0))) and (hold_read_read_fu_84_p2 = ap_const_lv1_0)))) then 
            delay3_V_we0 <= ap_const_logic_1;
        else 
            delay3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    hold_read_read_fu_84_p2 <= (0=>hold, others=>'-');

    intialized_count_V_f_1_phi_fu_160_p4_assign_proc : process(hold_read_reg_389, ap_CS_fsm_pp0_stage2, intialized_count_V_f_phi_fu_127_p4)
    begin
        if ((ap_const_boolean_1 and (hold_read_reg_389 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            intialized_count_V_f_1_phi_fu_160_p4 <= intialized_count_V_f_phi_fu_127_p4;
        else 
            intialized_count_V_f_1_phi_fu_160_p4 <= ap_const_lv1_0;
        end if; 
    end process;

    intialized_count_V_f_2_fu_365_p2 <= (intialized_count_V_f_1_phi_fu_160_p4 or not_tmp_s_fu_360_p2);

    intialized_count_V_f_phi_fu_127_p4_assign_proc : process(hold_read_reg_389, tmp_2_reg_408, ap_CS_fsm_pp0_stage2)
    begin
        if ((ap_const_boolean_1 and (hold_read_reg_389 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and not((ap_const_lv1_0 = tmp_2_reg_408)))) then 
            intialized_count_V_f_phi_fu_127_p4 <= ap_const_lv1_0;
        else 
            intialized_count_V_f_phi_fu_127_p4 <= ap_const_lv1_1;
        end if; 
    end process;


    intialized_count_V_n_1_phi_fu_172_p4_assign_proc : process(hold_read_reg_389, ap_CS_fsm_pp0_stage2, ap_phi_precharge_reg_pp0_iter0_intialized_count_V_n_reg_135, ap_phi_precharge_reg_pp0_iter0_intialized_count_V_n_1_reg_168)
    begin
        if ((ap_const_boolean_1 and (hold_read_reg_389 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            intialized_count_V_n_1_phi_fu_172_p4 <= ap_phi_precharge_reg_pp0_iter0_intialized_count_V_n_reg_135;
        else 
            intialized_count_V_n_1_phi_fu_172_p4 <= ap_phi_precharge_reg_pp0_iter0_intialized_count_V_n_1_reg_168;
        end if; 
    end process;

    intialized_count_V_n_2_fu_371_p3 <= 
        intialized_count_V_n_1_phi_fu_172_p4 when (tmp_14_reg_417(0) = '1') else 
        ap_const_lv16_400;
    not_tmp_s_fu_360_p2 <= (tmp_14_reg_417 xor ap_const_lv1_1);
    plength_V_fu_194_p1 <= val_assign_fu_188_p2(16 - 1 downto 0);
    r_V_fu_345_p2 <= std_logic_vector(shift_right(signed(tmp_13_phi_fu_149_p4),to_integer(unsigned('0' & tmp_1_fu_184_p1(31-1 downto 0)))));
    storemerge_fu_262_p3 <= 
        ap_const_lv16_0 when (tmp_4_fu_256_p2(0) = '1') else 
        tmp_5_fu_250_p2;
    tmp_10_fu_326_p2 <= std_logic_vector(unsigned(accumulator_V) - unsigned(tmp_9_fu_319_p1));
    tmp_11_fu_332_p2 <= std_logic_vector(unsigned(tmp_10_fu_326_p2) + unsigned(tmp_7_fu_323_p1));
    tmp_12_fu_310_p2 <= std_logic_vector(unsigned(t_V_1_reg_398) + unsigned(ap_const_lv16_FFFF));

    tmp_13_phi_fu_149_p4_assign_proc : process(hold_read_reg_389, tmp_2_reg_408, ap_CS_fsm_pp0_stage2, tmp_11_fu_332_p2)
    begin
        if ((ap_const_boolean_1 and (hold_read_reg_389 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and not((ap_const_lv1_0 = tmp_2_reg_408)))) then 
            tmp_13_phi_fu_149_p4 <= tmp_11_fu_332_p2;
        else 
            tmp_13_phi_fu_149_p4 <= ap_const_lv32_0;
        end if; 
    end process;

    tmp_14_fu_288_p2 <= "1" when (tmp_15_cast_fu_280_p1 = tmp_16_cast_fu_284_p1) else "0";
        tmp_15_cast_fu_280_p1 <= std_logic_vector(resize(signed(old_length_V),17));

    tmp_16_cast_fu_284_p1 <= std_logic_vector(resize(unsigned(length_V),17));
    tmp_16_fu_228_p3 <= tmp_6_fu_222_p2(15 downto 15);
    tmp_17_fu_350_p1 <= r_V_fu_345_p2(16 - 1 downto 0);
    tmp_1_fu_184_p1 <= std_logic_vector(resize(unsigned(length_V),32));
    tmp_2_fu_198_p2 <= "1" when (intialized_count_V = ap_const_lv16_0) else "0";
        tmp_3_fu_208_p1 <= std_logic_vector(resize(signed(write_pointer3_V),32));

    tmp_4_fu_256_p2 <= "1" when (tmp_5_fu_250_p2 = ap_const_lv16_400) else "0";
    tmp_5_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(write_pointer3_V));
    tmp_6_fu_222_p2 <= std_logic_vector(unsigned(write_pointer3_V) - unsigned(plength_V_fu_194_p1));
        tmp_7_fu_323_p1 <= std_logic_vector(resize(signed(adc_data_V_read_reg_393),32));

    tmp_8_fu_236_p2 <= std_logic_vector(unsigned(ap_const_lv16_400) + unsigned(tmp_6_fu_222_p2));
    tmp_8_tmp_6_fu_242_p3 <= 
        tmp_8_fu_236_p2 when (tmp_16_fu_228_p3(0) = '1') else 
        tmp_6_fu_222_p2;
        tmp_9_fu_319_p1 <= std_logic_vector(resize(signed(delay3_V_q0),32));

        tmp_s_fu_300_p1 <= std_logic_vector(resize(signed(tmp_8_tmp_6_reg_412),32));

    val_assign_fu_188_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & tmp_1_fu_184_p1(31-1 downto 0)))));
end behav;
