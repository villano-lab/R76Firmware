// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module data_mover_axil_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 7,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    // user signals
    input  wire [31:0]                   buffer_status,
    input  wire                          buffer_status_ap_vld,
    output wire [31:0]                   buffer_ack,
    input  wire [0:0]                    buffer_seq_address0,
    input  wire                          buffer_seq_ce0,
    input  wire                          buffer_seq_we0,
    input  wire [63:0]                   buffer_seq_d0,
    input  wire [0:0]                    bufsize_address0,
    input  wire                          bufsize_ce0,
    input  wire                          bufsize_we0,
    input  wire [31:0]                   bufsize_d0,
    output wire [0:0]                    run,
    output wire [31:0]                   DDROFFSET_V,
    input  wire [1:0]                    stat_counter_address0,
    input  wire                          stat_counter_ce0,
    input  wire                          stat_counter_we0,
    input  wire [63:0]                   stat_counter_d0
);
//------------------------Address Info-------------------
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : Data signal of buffer_status
//        bit 31~0 - buffer_status[31:0] (Read)
// 0x14 : Control signal of buffer_status
//        bit 0  - buffer_status_ap_vld (Read/COR)
//        others - reserved
// 0x18 : Data signal of buffer_ack
//        bit 31~0 - buffer_ack[31:0] (Read/Write)
// 0x1c : reserved
// 0x38 : Data signal of run
//        bit 0  - run[0] (Read/Write)
//        others - reserved
// 0x3c : reserved
// 0x40 : Data signal of DDROFFSET_V
//        bit 31~0 - DDROFFSET_V[31:0] (Read/Write)
// 0x44 : reserved
// 0x20 ~
// 0x2f : Memory 'buffer_seq' (2 * 64b)
//        Word 2n   : bit [31:0] - buffer_seq[n][31: 0]
//        Word 2n+1 : bit [31:0] - buffer_seq[n][63:32]
// 0x30 ~
// 0x37 : Memory 'bufsize' (2 * 32b)
//        Word n : bit [31:0] - bufsize[n]
// 0x60 ~
// 0x7f : Memory 'stat_counter' (4 * 64b)
//        Word 2n   : bit [31:0] - stat_counter[n][31: 0]
//        Word 2n+1 : bit [31:0] - stat_counter[n][63:32]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_BUFFER_STATUS_DATA_0 = 7'h10,
    ADDR_BUFFER_STATUS_CTRL   = 7'h14,
    ADDR_BUFFER_ACK_DATA_0    = 7'h18,
    ADDR_BUFFER_ACK_CTRL      = 7'h1c,
    ADDR_RUN_DATA_0           = 7'h38,
    ADDR_RUN_CTRL             = 7'h3c,
    ADDR_DDROFFSET_V_DATA_0   = 7'h40,
    ADDR_DDROFFSET_V_CTRL     = 7'h44,
    ADDR_BUFFER_SEQ_BASE      = 7'h20,
    ADDR_BUFFER_SEQ_HIGH      = 7'h2f,
    ADDR_BUFSIZE_BASE         = 7'h30,
    ADDR_BUFSIZE_HIGH         = 7'h37,
    ADDR_STAT_COUNTER_BASE    = 7'h60,
    ADDR_STAT_COUNTER_HIGH    = 7'h7f,
    WRIDLE                    = 2'd0,
    WRDATA                    = 2'd1,
    WRRESP                    = 2'd2,
    WRRESET                   = 2'd3,
    RDIDLE                    = 2'd0,
    RDDATA                    = 2'd1,
    RDRESET                   = 2'd2,
    ADDR_BITS         = 7;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg  [31:0]                   int_buffer_status = 'b0;
    reg                           int_buffer_status_ap_vld;
    reg  [31:0]                   int_buffer_ack = 'b0;
    reg  [0:0]                    int_run = 'b0;
    reg  [31:0]                   int_DDROFFSET_V = 'b0;
    // memory signals
    wire [0:0]                    int_buffer_seq_address0;
    wire                          int_buffer_seq_ce0;
    wire                          int_buffer_seq_we0;
    wire [7:0]                    int_buffer_seq_be0;
    wire [63:0]                   int_buffer_seq_d0;
    wire [63:0]                   int_buffer_seq_q0;
    wire [0:0]                    int_buffer_seq_address1;
    wire                          int_buffer_seq_ce1;
    wire                          int_buffer_seq_we1;
    wire [7:0]                    int_buffer_seq_be1;
    wire [63:0]                   int_buffer_seq_d1;
    wire [63:0]                   int_buffer_seq_q1;
    reg                           int_buffer_seq_read;
    reg                           int_buffer_seq_write;
    reg  [0:0]                    int_buffer_seq_shift;
    wire [0:0]                    int_bufsize_address0;
    wire                          int_bufsize_ce0;
    wire                          int_bufsize_we0;
    wire [3:0]                    int_bufsize_be0;
    wire [31:0]                   int_bufsize_d0;
    wire [31:0]                   int_bufsize_q0;
    wire [0:0]                    int_bufsize_address1;
    wire                          int_bufsize_ce1;
    wire                          int_bufsize_we1;
    wire [3:0]                    int_bufsize_be1;
    wire [31:0]                   int_bufsize_d1;
    wire [31:0]                   int_bufsize_q1;
    reg                           int_bufsize_read;
    reg                           int_bufsize_write;
    wire [1:0]                    int_stat_counter_address0;
    wire                          int_stat_counter_ce0;
    wire                          int_stat_counter_we0;
    wire [7:0]                    int_stat_counter_be0;
    wire [63:0]                   int_stat_counter_d0;
    wire [63:0]                   int_stat_counter_q0;
    wire [1:0]                    int_stat_counter_address1;
    wire                          int_stat_counter_ce1;
    wire                          int_stat_counter_we1;
    wire [7:0]                    int_stat_counter_be1;
    wire [63:0]                   int_stat_counter_d1;
    wire [63:0]                   int_stat_counter_q1;
    reg                           int_stat_counter_read;
    reg                           int_stat_counter_write;
    reg  [0:0]                    int_stat_counter_shift;

//------------------------Instantiation------------------
// int_buffer_seq
data_mover_axil_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 2 )
) int_buffer_seq (
    .clk0     ( ACLK ),
    .address0 ( int_buffer_seq_address0 ),
    .ce0      ( int_buffer_seq_ce0 ),
    .we0      ( int_buffer_seq_we0 ),
    .be0      ( int_buffer_seq_be0 ),
    .d0       ( int_buffer_seq_d0 ),
    .q0       ( int_buffer_seq_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_buffer_seq_address1 ),
    .ce1      ( int_buffer_seq_ce1 ),
    .we1      ( int_buffer_seq_we1 ),
    .be1      ( int_buffer_seq_be1 ),
    .d1       ( int_buffer_seq_d1 ),
    .q1       ( int_buffer_seq_q1 )
);
// int_bufsize
data_mover_axil_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 2 )
) int_bufsize (
    .clk0     ( ACLK ),
    .address0 ( int_bufsize_address0 ),
    .ce0      ( int_bufsize_ce0 ),
    .we0      ( int_bufsize_we0 ),
    .be0      ( int_bufsize_be0 ),
    .d0       ( int_bufsize_d0 ),
    .q0       ( int_bufsize_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_bufsize_address1 ),
    .ce1      ( int_bufsize_ce1 ),
    .we1      ( int_bufsize_we1 ),
    .be1      ( int_bufsize_be1 ),
    .d1       ( int_bufsize_d1 ),
    .q1       ( int_bufsize_q1 )
);
// int_stat_counter
data_mover_axil_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 4 )
) int_stat_counter (
    .clk0     ( ACLK ),
    .address0 ( int_stat_counter_address0 ),
    .ce0      ( int_stat_counter_ce0 ),
    .we0      ( int_stat_counter_we0 ),
    .be0      ( int_stat_counter_be0 ),
    .d0       ( int_stat_counter_d0 ),
    .q0       ( int_stat_counter_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_stat_counter_address1 ),
    .ce1      ( int_stat_counter_ce1 ),
    .we1      ( int_stat_counter_we1 ),
    .be1      ( int_stat_counter_be1 ),
    .d1       ( int_stat_counter_d1 ),
    .q1       ( int_stat_counter_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_buffer_seq_read & !int_bufsize_read & !int_stat_counter_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_BUFFER_STATUS_DATA_0: begin
                    rdata <= int_buffer_status[31:0];
                end
                ADDR_BUFFER_STATUS_CTRL: begin
                    rdata[0] <= int_buffer_status_ap_vld;
                end
                ADDR_BUFFER_ACK_DATA_0: begin
                    rdata <= int_buffer_ack[31:0];
                end
                ADDR_RUN_DATA_0: begin
                    rdata <= int_run[0:0];
                end
                ADDR_DDROFFSET_V_DATA_0: begin
                    rdata <= int_DDROFFSET_V[31:0];
                end
            endcase
        end
        else if (int_buffer_seq_read) begin
            rdata <= int_buffer_seq_q1 >> (int_buffer_seq_shift * 32);
        end
        else if (int_bufsize_read) begin
            rdata <= int_bufsize_q1;
        end
        else if (int_stat_counter_read) begin
            rdata <= int_stat_counter_q1 >> (int_stat_counter_shift * 32);
        end
    end
end


//------------------------Register logic-----------------
assign buffer_ack  = int_buffer_ack;
assign run         = int_run;
assign DDROFFSET_V = int_DDROFFSET_V;
// int_buffer_status
always @(posedge ACLK) begin
    if (ARESET)
        int_buffer_status <= 0;
    else if (ACLK_EN) begin
        if (buffer_status_ap_vld)
            int_buffer_status <= buffer_status;
    end
end

// int_buffer_status_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_buffer_status_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (buffer_status_ap_vld)
            int_buffer_status_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_BUFFER_STATUS_CTRL)
            int_buffer_status_ap_vld <= 1'b0; // clear on read
    end
end

// int_buffer_ack[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_buffer_ack[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BUFFER_ACK_DATA_0)
            int_buffer_ack[31:0] <= (WDATA[31:0] & wmask) | (int_buffer_ack[31:0] & ~wmask);
    end
end

// int_run[0:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_run[0:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_RUN_DATA_0)
            int_run[0:0] <= (WDATA[31:0] & wmask) | (int_run[0:0] & ~wmask);
    end
end

// int_DDROFFSET_V[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_DDROFFSET_V[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_DDROFFSET_V_DATA_0)
            int_DDROFFSET_V[31:0] <= (WDATA[31:0] & wmask) | (int_DDROFFSET_V[31:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------
// buffer_seq
assign int_buffer_seq_address0   = buffer_seq_address0;
assign int_buffer_seq_ce0        = buffer_seq_ce0;
assign int_buffer_seq_we0        = buffer_seq_we0;
assign int_buffer_seq_be0        = {8{buffer_seq_we0}};
assign int_buffer_seq_d0         = buffer_seq_d0;
assign int_buffer_seq_address1   = ar_hs? raddr[3:3] : waddr[3:3];
assign int_buffer_seq_ce1        = ar_hs | (int_buffer_seq_write & WVALID);
assign int_buffer_seq_we1        = int_buffer_seq_write & WVALID;
assign int_buffer_seq_be1        = WSTRB << (waddr[2:2] * 4);
assign int_buffer_seq_d1         = {2{WDATA}};
// bufsize
assign int_bufsize_address0      = bufsize_address0;
assign int_bufsize_ce0           = bufsize_ce0;
assign int_bufsize_we0           = bufsize_we0;
assign int_bufsize_be0           = {4{bufsize_we0}};
assign int_bufsize_d0            = bufsize_d0;
assign int_bufsize_address1      = ar_hs? raddr[2:2] : waddr[2:2];
assign int_bufsize_ce1           = ar_hs | (int_bufsize_write & WVALID);
assign int_bufsize_we1           = int_bufsize_write & WVALID;
assign int_bufsize_be1           = WSTRB;
assign int_bufsize_d1            = WDATA;
// stat_counter
assign int_stat_counter_address0 = stat_counter_address0;
assign int_stat_counter_ce0      = stat_counter_ce0;
assign int_stat_counter_we0      = stat_counter_we0;
assign int_stat_counter_be0      = {8{stat_counter_we0}};
assign int_stat_counter_d0       = stat_counter_d0;
assign int_stat_counter_address1 = ar_hs? raddr[4:3] : waddr[4:3];
assign int_stat_counter_ce1      = ar_hs | (int_stat_counter_write & WVALID);
assign int_stat_counter_we1      = int_stat_counter_write & WVALID;
assign int_stat_counter_be1      = WSTRB << (waddr[2:2] * 4);
assign int_stat_counter_d1       = {2{WDATA}};
// int_buffer_seq_read
always @(posedge ACLK) begin
    if (ARESET)
        int_buffer_seq_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BUFFER_SEQ_BASE && raddr <= ADDR_BUFFER_SEQ_HIGH)
            int_buffer_seq_read <= 1'b1;
        else
            int_buffer_seq_read <= 1'b0;
    end
end

// int_buffer_seq_write
always @(posedge ACLK) begin
    if (ARESET)
        int_buffer_seq_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BUFFER_SEQ_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BUFFER_SEQ_HIGH)
            int_buffer_seq_write <= 1'b1;
        else if (WVALID)
            int_buffer_seq_write <= 1'b0;
    end
end

// int_buffer_seq_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_buffer_seq_shift <= raddr[2:2];
    end
end

// int_bufsize_read
always @(posedge ACLK) begin
    if (ARESET)
        int_bufsize_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BUFSIZE_BASE && raddr <= ADDR_BUFSIZE_HIGH)
            int_bufsize_read <= 1'b1;
        else
            int_bufsize_read <= 1'b0;
    end
end

// int_bufsize_write
always @(posedge ACLK) begin
    if (ARESET)
        int_bufsize_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BUFSIZE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BUFSIZE_HIGH)
            int_bufsize_write <= 1'b1;
        else if (WVALID)
            int_bufsize_write <= 1'b0;
    end
end

// int_stat_counter_read
always @(posedge ACLK) begin
    if (ARESET)
        int_stat_counter_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_STAT_COUNTER_BASE && raddr <= ADDR_STAT_COUNTER_HIGH)
            int_stat_counter_read <= 1'b1;
        else
            int_stat_counter_read <= 1'b0;
    end
end

// int_stat_counter_write
always @(posedge ACLK) begin
    if (ARESET)
        int_stat_counter_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_STAT_COUNTER_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_STAT_COUNTER_HIGH)
            int_stat_counter_write <= 1'b1;
        else if (WVALID)
            int_stat_counter_write <= 1'b0;
    end
end

// int_stat_counter_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_stat_counter_shift <= raddr[2:2];
    end
end


endmodule


`timescale 1ns/1ps

module data_mover_axil_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

